steps:
  # Step 1: Set up Terraform
  - name: 'hashicorp/terraform:1.5'
    id: 'terraform-setup'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Setting up Terraform..."
        terraform version

  # Step 2: Authenticate with GCP (automatic in Cloud Build)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'gcp-auth'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        set -euo pipefail
        echo "Verifying GCP authentication..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        gcloud config list project --format="value(core.project)"

  # Step 3: Initialize Terraform
  - name: 'hashicorp/terraform:1.5'
    id: 'terraform-init'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd /workspace
        echo "Initializing Terraform..."
        terraform init
        terraform validate

  # Step 4: Simple Databricks test + Terraform plan
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'terraform-plan'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        set -euo pipefail
        cd /workspace
 
        # Install Terraform & tools
        apt-get update && apt-get install -y unzip wget jq
        wget -q https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip -q terraform_1.5.0_linux_amd64.zip
        mv terraform /usr/local/bin/
        chmod +x /usr/local/bin/terraform
 
        # GCP SA impersonation (for any GCP ops)
        gcloud config set auth/impersonate_service_account andrea-tardif-sa@fe-dev-sandbox.iam.gserviceaccount.com
 
        # Simple Terraform variables (only what's needed)
        export TF_VAR_databricks_account_id="e11e38c5-a449-47b9-b37f-0fa36c821612" # gitleaks:allow
        export TF_VAR_databricks_sp_client_id="9e52f02e-3246-4b6b-aca2-de6b7b849f4d" # gitleaks:allow
        export TF_VAR_databricks_sp_client_secret="dose078de60adfb9442b5d16caa7d2e85ecb" # gitleaks:allow
        
        # Test credentials before Terraform  
        echo "Testing Databricks credentials..."
        CLIENT_ID="9e52f02e-3246-4b6b-aca2-de6b7b849f4d" # gitleaks:allow
        CLIENT_SECRET="dose078de60adfb9442b5d16caa7d2e85ecb" # gitleaks:allow
        
        RESPONSE=$(curl -sS -X POST "https://accounts.gcp.databricks.com/oidc/accounts/e11e38c5-a449-47b9-b37f-0fa36c821612/v1/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials" \
          -d "client_id=$$CLIENT_ID" \
          -d "client_secret=$$CLIENT_SECRET" \
          -d "scope=all-apis")
        
        if echo "$$RESPONSE" | jq -e '.access_token' >/dev/null 2>&1; then
          echo "✅ Credentials work! Token expires in: $(echo "$$RESPONSE" | jq -r '.expires_in') seconds"
        else
          echo "❌ Credential test failed. Response:"
          echo "$$RESPONSE"
          exit 1
        fi
 
        echo "Creating Terraform plan..."
        terraform plan -out=tfplan

  # Step 5: Apply Terraform
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'terraform-apply'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        set -euo pipefail
        cd /workspace
 
        # Install Terraform & tools
        apt-get update && apt-get install -y unzip wget jq
        wget -q https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip -q terraform_1.5.0_linux_amd64.zip
        mv terraform /usr/local/bin/
        chmod +x /usr/local/bin/terraform
 
        # GCP SA impersonation (for any GCP ops)
        gcloud config set auth/impersonate_service_account andrea-tardif-sa@fe-dev-sandbox.iam.gserviceaccount.com
 
        # Simple Terraform variables (only what's needed)
        export TF_VAR_databricks_account_id="e11e38c5-a449-47b9-b37f-0fa36c821612" # gitleaks:allow
        export TF_VAR_databricks_sp_client_id="9e52f02e-3246-4b6b-aca2-de6b7b849f4d" # gitleaks:allow
        export TF_VAR_databricks_sp_client_secret="dose078de60adfb9442b5d16caa7d2e85ecb" # gitleaks:allow
 
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve tfplan
 
        echo "Terraform apply completed successfully!"
 
        echo "Databricks Workspace URL:"
        terraform output databricks_host
