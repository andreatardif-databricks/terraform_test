steps:
  # Step 1: Initialize Terraform
  - id: terraform-init
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Initializing Terraform..."
        terraform init -upgrade

# Step 2: Auth GCP
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'gcp-auth'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        set -euo pipefail
        echo "Verifying GCP authentication..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        gcloud config list project --format="value(core.project)"

  # Step 3: Auth Databricks
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'databricks-auth'
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        test -n "${TF_VAR_databricks_sp_client_id:-}" || { echo "Missing TF_VAR_databricks_sp_client_id"; exit 1; }
        test -n "${TF_VAR_databricks_sp_client_secret:-}" || { echo "Missing TF_VAR_databricks_sp_client_secret"; exit 1; }
        CODE=$(curl -sS -o /tmp/token.json -w "%{http_code}" \
          -u "$TF_VAR_databricks_sp_client_id:$TF_VAR_databricks_sp_client_secret" \
          -d "grant_type=client_credentials&scope=all-apis" \
          https://accounts.gcp.databricks.com/oidc/token || true)
        if [ "$CODE" != "200" ]; then
          echo "Failed to mint token (HTTP $CODE). Check OAuth app client_id/secret and account access."
          cat /tmp/token.json || true
          exit 1
        fi
        echo "Databricks OAuth token minted successfully."

  # Step 3: Validate the Terraform configuration
  - id: terraform-validate
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Validating Terraform configuration..."
        terraform validate

  # Step 4: Generate Terraform plan and save it to a file
  - id: terraform-plan
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Running Terraform plan..."
        terraform plan  -input=false -compact-warnings -out=tfplan.out

  # Step 5: Apply the saved plan automatically
  - id: terraform-apply
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Applying Terraform plan..."
        terraform apply -input=false -auto-approve tfplan.out
