steps:
  # Step 0: Auth Databricks using the CLI
  - id: databricks-auth
    name: ghcr.io/databricks/cli:latest
    args:
      - auth
      - login
      - --host
      - https://accounts.gcp.databricks.com
      - --account-id
      - e11e38c5-a449-47b9-b37f-0fa36c821612 # gitleaks:allow
      - --client-id
      - 9e52f02e-3246-4b6b-aca2-de6b7b849f4d # gitleaks:allow
      - --client-secret
      - dose078de60adfb9442b5d16caa7d2e85ecb # gitleaks:allow

  # Step 1: Initialize Terraform
  - id: terraform-init
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Initializing Terraform..."
        terraform init -upgrade

# Step 2: Auth GCP
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'gcp-auth'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        set -euo pipefail
        echo "Verifying GCP authentication..."
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        gcloud config list project --format="value(core.project)"

  # Step 3: Validate the Terraform configuration
  - id: terraform-validate
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Validating Terraform configuration..."
        terraform validate

  # Step 4: Generate Terraform plan and save it to a file
  - id: terraform-plan
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Running Terraform plan..."
        terraform plan  -input=false -compact-warnings -out=tfplan.out

  # Step 5: Apply the saved plan automatically
  - id: terraform-apply
    name: hashicorp/terraform:1.6.6
    entrypoint: sh
    args:
      - -lc
      - |
        echo "Applying Terraform plan..."
        terraform apply -input=false -auto-approve tfplan.out
